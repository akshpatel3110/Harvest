{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akshp\\\\OneDrive\\\\Desktop\\\\Orchard\\\\orchard-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [scanDate, setScanDate] = useState('');\n  const [harvestDate, setHarvestDate] = useState('');\n  const [growthRate, setGrowthRate] = useState('');\n  const [minDiameter, setMinDiameter] = useState(20);\n  const [maxDiameter, setMaxDiameter] = useState(120);\n  const [histogram, setHistogram] = useState([]);\n  const [avgSize, setAvgSize] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async () => {\n    if (!scanDate || !harvestDate || !growthRate) {\n      alert('Please fill all inputs.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch('http://34.44.41.132:5000/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          scan_date: scanDate,\n          harvest_date: harvestDate,\n          growth_rate: parseFloat(growthRate),\n          min_diameter: parseFloat(minDiameter),\n          max_diameter: parseFloat(maxDiameter)\n        })\n      });\n      const data = await response.json();\n      setAvgSize(data.average_size);\n      setHistogram(data.histogram);\n    } catch (error) {\n      alert('Failed to connect to backend: ' + error.message);\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Fruit Harvest Size Predictor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Scan Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: scanDate,\n        onChange: e => setScanDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Harvest Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: harvestDate,\n        onChange: e => setHarvestDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Growth Rate (mm\\xB3/day): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: growthRate,\n        onChange: e => setGrowthRate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Min Diameter (mm): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"20\",\n        max: \"120\",\n        value: minDiameter,\n        onChange: e => setMinDiameter(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: minDiameter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Max Diameter (mm): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"20\",\n        max: \"120\",\n        value: maxDiameter,\n        onChange: e => setMaxDiameter(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: maxDiameter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: loading,\n      children: loading ? 'Calculating...' : 'Submit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), avgSize && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Average Predicted Volume: \", avgSize.toFixed(2), \" mm\\xB3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Histogram (Volume bins)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: histogram.map(({\n          bin_start,\n          count\n        }) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [bin_start, \" - \", bin_start + 5000, \": \", count]\n        }, bin_start, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"81kxMW63d7M8pi6Mu6pZySos2lg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","scanDate","setScanDate","harvestDate","setHarvestDate","growthRate","setGrowthRate","minDiameter","setMinDiameter","maxDiameter","setMaxDiameter","histogram","setHistogram","avgSize","setAvgSize","loading","setLoading","handleSubmit","alert","response","fetch","method","headers","body","JSON","stringify","scan_date","harvest_date","growth_rate","parseFloat","min_diameter","max_diameter","data","json","average_size","error","message","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","min","max","onClick","disabled","toFixed","map","bin_start","count","_c","$RefreshReg$"],"sources":["C:/Users/akshp/OneDrive/Desktop/Orchard/orchard-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [scanDate, setScanDate] = useState('');\n  const [harvestDate, setHarvestDate] = useState('');\n  const [growthRate, setGrowthRate] = useState('');\n  const [minDiameter, setMinDiameter] = useState(20);\n  const [maxDiameter, setMaxDiameter] = useState(120);\n  const [histogram, setHistogram] = useState([]);\n  const [avgSize, setAvgSize] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    if (!scanDate || !harvestDate || !growthRate) {\n      alert('Please fill all inputs.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch('http://34.44.41.132:5000/predict', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          scan_date: scanDate,\n          harvest_date: harvestDate,\n          growth_rate: parseFloat(growthRate),\n          min_diameter: parseFloat(minDiameter),\n          max_diameter: parseFloat(maxDiameter),\n        }),\n      });\n      const data = await response.json();\n      setAvgSize(data.average_size);\n      setHistogram(data.histogram);\n    } catch (error) {\n      alert('Failed to connect to backend: ' + error.message);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h1>Fruit Harvest Size Predictor</h1>\n      <div>\n        <label>Scan Date: </label>\n        <input type=\"date\" value={scanDate} onChange={e => setScanDate(e.target.value)} />\n      </div>\n      <div>\n        <label>Harvest Date: </label>\n        <input type=\"date\" value={harvestDate} onChange={e => setHarvestDate(e.target.value)} />\n      </div>\n      <div>\n        <label>Growth Rate (mmÂ³/day): </label>\n        <input type=\"number\" value={growthRate} onChange={e => setGrowthRate(e.target.value)} />\n      </div>\n      <div>\n        <label>Min Diameter (mm): </label>\n        <input\n          type=\"range\"\n          min=\"20\"\n          max=\"120\"\n          value={minDiameter}\n          onChange={e => setMinDiameter(e.target.value)}\n        />\n        <span>{minDiameter}</span>\n      </div>\n      <div>\n        <label>Max Diameter (mm): </label>\n        <input\n          type=\"range\"\n          min=\"20\"\n          max=\"120\"\n          value={maxDiameter}\n          onChange={e => setMaxDiameter(e.target.value)}\n        />\n        <span>{maxDiameter}</span>\n      </div>\n      <button onClick={handleSubmit} disabled={loading}>\n        {loading ? 'Calculating...' : 'Submit'}\n      </button>\n\n      {avgSize && (\n        <div>\n          <h2>Average Predicted Volume: {avgSize.toFixed(2)} mmÂ³</h2>\n          <h3>Histogram (Volume bins)</h3>\n          <ul>\n            {histogram.map(({ bin_start, count }) => (\n              <li key={bin_start}>\n                {bin_start} - {bin_start + 5000}: {count}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}