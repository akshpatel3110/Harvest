{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akshp\\\\OneDrive\\\\Desktop\\\\Orchard\\\\orchard-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  page: {\n    minHeight: '100vh',\n    backgroundColor: '#2563eb',\n    // Blue-600 from Tailwind for strong blue background\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    padding: 20,\n    boxSizing: 'border-box'\n  },\n  container: {\n    maxWidth: 900,\n    width: '100%',\n    marginTop: 40,\n    padding: '30px 25px',\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n    backgroundColor: '#3b82f6',\n    // Blue-500 for container (lighter blue)\n    borderRadius: 12,\n    boxShadow: '0 6px 20px rgba(0,0,0,0.3)',\n    color: '#e0e7ff',\n    // light blue text for readability\n    display: 'flex',\n    flexDirection: 'column',\n    gap: 20,\n    boxSizing: 'border-box'\n  },\n  title: {\n    textAlign: 'center',\n    color: '#dbeafe',\n    // very light blue text\n    marginBottom: 20,\n    fontWeight: '700',\n    fontSize: '2.4rem'\n  },\n  formRow: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: '15px',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  label: {\n    flex: '0 0 160px',\n    fontWeight: '700',\n    color: '#bfdbfe',\n    // lighter blue text\n    fontSize: '1rem'\n  },\n  input: {\n    flex: '1 1 220px',\n    padding: '10px 15px',\n    fontSize: '1rem',\n    borderRadius: 8,\n    border: '2px solid #93c5fd',\n    backgroundColor: '#bfdbfe',\n    color: '#1e40af',\n    // dark blue text inside inputs\n    outline: 'none',\n    transition: 'border-color 0.3s, box-shadow 0.3s'\n  },\n  rangeValue: {\n    marginLeft: 15,\n    minWidth: 45,\n    fontWeight: '700',\n    color: '#dbeafe',\n    fontSize: '1.1rem'\n  },\n  button: {\n    width: '100%',\n    padding: '15px 0',\n    fontSize: '1.2rem',\n    fontWeight: '700',\n    backgroundColor: '#1e40af',\n    // Blue-900 for strong button\n    color: 'white',\n    border: 'none',\n    borderRadius: 12,\n    cursor: 'pointer',\n    transition: 'background-color 0.3s, box-shadow 0.3s',\n    boxShadow: '0 5px 15px rgba(30,64,175,0.7)'\n  },\n  buttonHover: {\n    backgroundColor: '#3b82f6',\n    // Blue-500 lighter on hover\n    boxShadow: '0 6px 20px rgba(59,130,246,0.9)'\n  },\n  buttonDisabled: {\n    backgroundColor: '#93c5fd',\n    cursor: 'not-allowed',\n    boxShadow: 'none',\n    color: '#1e40af'\n  },\n  results: {\n    marginTop: 30,\n    textAlign: 'center',\n    color: '#dbeafe'\n  },\n  errorMsg: {\n    color: '#f87171',\n    // red-400 for errors\n    marginBottom: 15,\n    fontWeight: '700',\n    fontSize: '1rem',\n    textAlign: 'center'\n  }\n};\nfunction App() {\n  _s();\n  const [scanDate, setScanDate] = useState('');\n  const [harvestDate, setHarvestDate] = useState('');\n  const [growthRate, setGrowthRate] = useState('');\n  const [minDiameter, setMinDiameter] = useState(20);\n  const [maxDiameter, setMaxDiameter] = useState(120);\n  const [histogram, setHistogram] = useState([]);\n  const [avgSize, setAvgSize] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [btnHover, setBtnHover] = useState(false);\n  const handleSubmit = async () => {\n    setError(null);\n    if (!scanDate || !harvestDate || !growthRate) {\n      setError('Please fill all required inputs.');\n      return;\n    }\n    if (new Date(harvestDate) <= new Date(scanDate)) {\n      setError('Harvest date must be after scan date.');\n      return;\n    }\n    if (minDiameter > maxDiameter) {\n      setError('Min diameter cannot be greater than max diameter.');\n      return;\n    }\n    setLoading(true);\n    setAvgSize(null);\n    setHistogram([]);\n    try {\n      const response = await fetch('http://34.44.41.132:5000/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          scan_date: scanDate,\n          harvest_date: harvestDate,\n          growth_rate: parseFloat(growthRate),\n          min_diameter: parseFloat(minDiameter),\n          max_diameter: parseFloat(maxDiameter)\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setAvgSize(data.average_size);\n      const histogramWithLabels = data.histogram.map(({\n        bin_start,\n        count\n      }) => ({\n        volumeRange: `${bin_start} - ${bin_start + 5000}`,\n        count\n      }));\n      setHistogram(histogramWithLabels);\n    } catch (e) {\n      setError('Failed to connect to backend: ' + e.message);\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.page,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: styles.title,\n        children: \"Fruit Harvest Size Predictor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.errorMsg,\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.formRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.label,\n          htmlFor: \"scanDate\",\n          children: \"Scan Date *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          style: styles.input,\n          type: \"date\",\n          id: \"scanDate\",\n          value: scanDate,\n          onChange: e => setScanDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.formRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.label,\n          htmlFor: \"harvestDate\",\n          children: \"Harvest Date *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          style: styles.input,\n          type: \"date\",\n          id: \"harvestDate\",\n          value: harvestDate,\n          onChange: e => setHarvestDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.formRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.label,\n          htmlFor: \"growthRate\",\n          children: \"Growth Rate (mm\\xB3/day) *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          style: styles.input,\n          type: \"number\",\n          id: \"growthRate\",\n          min: \"0\",\n          value: growthRate,\n          onChange: e => setGrowthRate(e.target.value),\n          placeholder: \"e.g. 1000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.formRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.label,\n          htmlFor: \"minDiameter\",\n          children: \"Min Diameter (mm)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          id: \"minDiameter\",\n          min: \"20\",\n          max: \"120\",\n          value: minDiameter,\n          onChange: e => setMinDiameter(Number(e.target.value)),\n          style: {\n            flex: '1 1 auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.rangeValue,\n          children: minDiameter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.formRow,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.label,\n          htmlFor: \"maxDiameter\",\n          children: \"Max Diameter (mm)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          id: \"maxDiameter\",\n          min: \"20\",\n          max: \"120\",\n          value: maxDiameter,\n          onChange: e => setMaxDiameter(Number(e.target.value)),\n          style: {\n            flex: '1 1 auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.rangeValue,\n          children: maxDiameter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          ...styles.button,\n          ...(loading ? styles.buttonDisabled : {}),\n          ...(btnHover && !loading ? styles.buttonHover : {})\n        },\n        onClick: handleSubmit,\n        onMouseEnter: () => setBtnHover(true),\n        onMouseLeave: () => setBtnHover(false),\n        disabled: loading,\n        children: loading ? 'Calculating...' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), avgSize !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.results,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Average Predicted Volume: \", avgSize.toFixed(2), \" mm\\xB3\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this), histogram.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 350,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: histogram,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 80\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"#93c5fd\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"volumeRange\",\n              angle: -60,\n              textAnchor: \"end\",\n              interval: Math.floor(histogram.length / 10),\n              height: 80,\n              tick: {\n                fontSize: 13,\n                fill: '#dbeafe'\n              },\n              tickFormatter: label => {\n                return label.replace(/\\d+/g, num => {\n                  const n = parseInt(num, 10);\n                  if (n >= 1000) return n / 1000 + 'k';\n                  return num;\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              stroke: \"#dbeafe\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [value, 'Count'],\n              labelFormatter: label => `Volume range: ${label}`,\n              contentStyle: {\n                backgroundColor: '#2563eb',\n                borderRadius: 8,\n                border: 'none'\n              },\n              itemStyle: {\n                color: '#e0e7ff'\n              },\n              labelStyle: {\n                color: '#93c5fd',\n                fontWeight: '700'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"count\",\n              fill: \"#1e40af\",\n              radius: [8, 8, 0, 0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No histogram data available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WEX25XN3J0gLKnW3BgNN8qhihnM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","styles","page","minHeight","backgroundColor","display","justifyContent","alignItems","padding","boxSizing","container","maxWidth","width","marginTop","fontFamily","borderRadius","boxShadow","color","flexDirection","gap","title","textAlign","marginBottom","fontWeight","fontSize","formRow","flexWrap","label","flex","input","border","outline","transition","rangeValue","marginLeft","minWidth","button","cursor","buttonHover","buttonDisabled","results","errorMsg","App","_s","scanDate","setScanDate","harvestDate","setHarvestDate","growthRate","setGrowthRate","minDiameter","setMinDiameter","maxDiameter","setMaxDiameter","histogram","setHistogram","avgSize","setAvgSize","loading","setLoading","error","setError","btnHover","setBtnHover","handleSubmit","Date","response","fetch","method","headers","body","JSON","stringify","scan_date","harvest_date","growth_rate","parseFloat","min_diameter","max_diameter","ok","Error","statusText","data","json","average_size","histogramWithLabels","map","bin_start","count","volumeRange","e","message","style","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","target","min","placeholder","max","Number","onClick","onMouseEnter","onMouseLeave","disabled","toFixed","length","height","margin","top","right","left","bottom","strokeDasharray","stroke","dataKey","angle","textAnchor","interval","Math","floor","tick","fill","tickFormatter","replace","num","n","parseInt","formatter","labelFormatter","contentStyle","itemStyle","labelStyle","radius","_c","$RefreshReg$"],"sources":["C:/Users/akshp/OneDrive/Desktop/Orchard/orchard-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n} from 'recharts';\n\nconst styles = {\n  page: {\n    minHeight: '100vh',\n    backgroundColor: '#2563eb', // Blue-600 from Tailwind for strong blue background\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    padding: 20,\n    boxSizing: 'border-box',\n  },\n  container: {\n    maxWidth: 900,\n    width: '100%',\n    marginTop: 40,\n    padding: '30px 25px',\n    fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n    backgroundColor: '#3b82f6', // Blue-500 for container (lighter blue)\n    borderRadius: 12,\n    boxShadow: '0 6px 20px rgba(0,0,0,0.3)',\n    color: '#e0e7ff', // light blue text for readability\n    display: 'flex',\n    flexDirection: 'column',\n    gap: 20,\n    boxSizing: 'border-box',\n  },\n  title: {\n    textAlign: 'center',\n    color: '#dbeafe', // very light blue text\n    marginBottom: 20,\n    fontWeight: '700',\n    fontSize: '2.4rem',\n  },\n  formRow: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: '15px',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  label: {\n    flex: '0 0 160px',\n    fontWeight: '700',\n    color: '#bfdbfe', // lighter blue text\n    fontSize: '1rem',\n  },\n  input: {\n    flex: '1 1 220px',\n    padding: '10px 15px',\n    fontSize: '1rem',\n    borderRadius: 8,\n    border: '2px solid #93c5fd',\n    backgroundColor: '#bfdbfe',\n    color: '#1e40af', // dark blue text inside inputs\n    outline: 'none',\n    transition: 'border-color 0.3s, box-shadow 0.3s',\n  },\n  rangeValue: {\n    marginLeft: 15,\n    minWidth: 45,\n    fontWeight: '700',\n    color: '#dbeafe',\n    fontSize: '1.1rem',\n  },\n  button: {\n    width: '100%',\n    padding: '15px 0',\n    fontSize: '1.2rem',\n    fontWeight: '700',\n    backgroundColor: '#1e40af', // Blue-900 for strong button\n    color: 'white',\n    border: 'none',\n    borderRadius: 12,\n    cursor: 'pointer',\n    transition: 'background-color 0.3s, box-shadow 0.3s',\n    boxShadow: '0 5px 15px rgba(30,64,175,0.7)',\n  },\n  buttonHover: {\n    backgroundColor: '#3b82f6', // Blue-500 lighter on hover\n    boxShadow: '0 6px 20px rgba(59,130,246,0.9)',\n  },\n  buttonDisabled: {\n    backgroundColor: '#93c5fd',\n    cursor: 'not-allowed',\n    boxShadow: 'none',\n    color: '#1e40af',\n  },\n  results: {\n    marginTop: 30,\n    textAlign: 'center',\n    color: '#dbeafe',\n  },\n  errorMsg: {\n    color: '#f87171', // red-400 for errors\n    marginBottom: 15,\n    fontWeight: '700',\n    fontSize: '1rem',\n    textAlign: 'center',\n  },\n};\n\nfunction App() {\n  const [scanDate, setScanDate] = useState('');\n  const [harvestDate, setHarvestDate] = useState('');\n  const [growthRate, setGrowthRate] = useState('');\n  const [minDiameter, setMinDiameter] = useState(20);\n  const [maxDiameter, setMaxDiameter] = useState(120);\n  const [histogram, setHistogram] = useState([]);\n  const [avgSize, setAvgSize] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [btnHover, setBtnHover] = useState(false);\n\n  const handleSubmit = async () => {\n    setError(null);\n    if (!scanDate || !harvestDate || !growthRate) {\n      setError('Please fill all required inputs.');\n      return;\n    }\n    if (new Date(harvestDate) <= new Date(scanDate)) {\n      setError('Harvest date must be after scan date.');\n      return;\n    }\n    if (minDiameter > maxDiameter) {\n      setError('Min diameter cannot be greater than max diameter.');\n      return;\n    }\n\n    setLoading(true);\n    setAvgSize(null);\n    setHistogram([]);\n\n    try {\n      const response = await fetch('http://34.44.41.132:5000/predict', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          scan_date: scanDate,\n          harvest_date: harvestDate,\n          growth_rate: parseFloat(growthRate),\n          min_diameter: parseFloat(minDiameter),\n          max_diameter: parseFloat(maxDiameter),\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setAvgSize(data.average_size);\n      const histogramWithLabels = data.histogram.map(({ bin_start, count }) => ({\n        volumeRange: `${bin_start} - ${bin_start + 5000}`,\n        count,\n      }));\n      setHistogram(histogramWithLabels);\n    } catch (e) {\n      setError('Failed to connect to backend: ' + e.message);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div style={styles.page}>\n      <div style={styles.container}>\n        <h1 style={styles.title}>Fruit Harvest Size Predictor</h1>\n\n        {error && <div style={styles.errorMsg}>{error}</div>}\n\n        <div style={styles.formRow}>\n          <label style={styles.label} htmlFor=\"scanDate\">Scan Date *</label>\n          <input\n            style={styles.input}\n            type=\"date\"\n            id=\"scanDate\"\n            value={scanDate}\n            onChange={e => setScanDate(e.target.value)}\n          />\n        </div>\n\n        <div style={styles.formRow}>\n          <label style={styles.label} htmlFor=\"harvestDate\">Harvest Date *</label>\n          <input\n            style={styles.input}\n            type=\"date\"\n            id=\"harvestDate\"\n            value={harvestDate}\n            onChange={e => setHarvestDate(e.target.value)}\n          />\n        </div>\n\n        <div style={styles.formRow}>\n          <label style={styles.label} htmlFor=\"growthRate\">Growth Rate (mm³/day) *</label>\n          <input\n            style={styles.input}\n            type=\"number\"\n            id=\"growthRate\"\n            min=\"0\"\n            value={growthRate}\n            onChange={e => setGrowthRate(e.target.value)}\n            placeholder=\"e.g. 1000\"\n          />\n        </div>\n\n        <div style={styles.formRow}>\n          <label style={styles.label} htmlFor=\"minDiameter\">Min Diameter (mm)</label>\n          <input\n            type=\"range\"\n            id=\"minDiameter\"\n            min=\"20\"\n            max=\"120\"\n            value={minDiameter}\n            onChange={e => setMinDiameter(Number(e.target.value))}\n            style={{ flex: '1 1 auto' }}\n          />\n          <span style={styles.rangeValue}>{minDiameter}</span>\n        </div>\n\n        <div style={styles.formRow}>\n          <label style={styles.label} htmlFor=\"maxDiameter\">Max Diameter (mm)</label>\n          <input\n            type=\"range\"\n            id=\"maxDiameter\"\n            min=\"20\"\n            max=\"120\"\n            value={maxDiameter}\n            onChange={e => setMaxDiameter(Number(e.target.value))}\n            style={{ flex: '1 1 auto' }}\n          />\n          <span style={styles.rangeValue}>{maxDiameter}</span>\n        </div>\n\n        <button\n          style={{\n            ...styles.button,\n            ...(loading ? styles.buttonDisabled : {}),\n            ...(btnHover && !loading ? styles.buttonHover : {}),\n          }}\n          onClick={handleSubmit}\n          onMouseEnter={() => setBtnHover(true)}\n          onMouseLeave={() => setBtnHover(false)}\n          disabled={loading}\n        >\n          {loading ? 'Calculating...' : 'Submit'}\n        </button>\n\n        {avgSize !== null && (\n          <div style={styles.results}>\n            <h2>Average Predicted Volume: {avgSize.toFixed(2)} mm³</h2>\n\n            {histogram.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height={350}>\n                <BarChart data={histogram} margin={{ top: 20, right: 30, left: 20, bottom: 80 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#93c5fd\" />\n                  <XAxis\n                    dataKey=\"volumeRange\"\n                    angle={-60}\n                    textAnchor=\"end\"\n                    interval={Math.floor(histogram.length / 10)}\n                    height={80}\n                    tick={{ fontSize: 13, fill: '#dbeafe' }}\n                    tickFormatter={label => {\n                      return label.replace(/\\d+/g, num => {\n                        const n = parseInt(num, 10);\n                        if (n >= 1000) return (n / 1000) + 'k';\n                        return num;\n                      });\n                    }}\n                  />\n                  <YAxis stroke=\"#dbeafe\" />\n                  <Tooltip\n                    formatter={(value) => [value, 'Count']}\n                    labelFormatter={(label) => `Volume range: ${label}`}\n                    contentStyle={{ backgroundColor: '#2563eb', borderRadius: 8, border: 'none' }}\n                    itemStyle={{ color: '#e0e7ff' }}\n                    labelStyle={{ color: '#93c5fd', fontWeight: '700' }}\n                  />\n                  <Bar dataKey=\"count\" fill=\"#1e40af\" radius={[8, 8, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            ) : (\n              <p>No histogram data available.</p>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}